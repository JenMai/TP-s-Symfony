{% extends 'base.html.twig' %}

{% block title %}Home page{% endblock %}

{% block body %}

    <div class="panel">
        <h2>Les events  => listener - dispatcher</h2>
        <h2>Qu'est ce que c'est ?</h2>
        <h3>Différence :</h3>
        <h3>Les listeners peuvent être activé/désactivé dans la config. </h3>
        <h3>Les subscribers ont toute la logique dans leur classe, ils sont plus flexible</h3>
        <h3>Désavantages des subscribers , c'est qui sont tous chargés en cache alors que le listener est chargé lors de son appel.</h3>
    </div>

    <div class="panel">
        <h2>Listener</h2>
        <h2>namespace =  App\EventListener</h2>
        <h2>Exemple : <a href="https://symfony.com/doc/current/reference/events.html" target="_blank">ici</a></h2>
        <h2>Exemple concret : User Create</h2>
    </div>

    <div class="panel">
        <h2>Subscriber</h2>
        <h2>namespace =  App\EventSubscriber</h2>
        <h2>Exemple UserEdit et login</h2>
    </div>

    <div class="panel">
        <h2>Tp du jour</h2>
        <h2>Voyage vers l'infini et au delà <a href="{{ path('home_game') }}">Game</a></h2>
        <h2>1 - Créer une contrainte de validation pour ActionUser:direction ( LEFT, TOP, RIGHT, BOTTOM )</h2>
        <h2>2 - Créer un FormType ActionUser:direction en RADIO ( LEFT, TOP, RIGHT, BOTTOM )</h2>
        <h2>3 - Sécuriser l'action home_game pour ROLE_USER</h2>
        <h2>4 - Gérer l'action game pour déplacer l'utilisateur avec le principe des listeners ( Edit l'User et loguer l'ActionUser )</h2>
        <h2>5 - Gérer l'action pour reset l'utilisateur avec le principe des subscribers  ( Si utilisateur à plus de 10 mouvements on le remet sur les coordonnées 0,0 et on supprime l'historique des actions !  )</h2>
    </div>

{% endblock %}